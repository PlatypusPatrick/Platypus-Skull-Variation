Code bin

------------------------------------------------------------------------
#Is there allometry in the whole sample?
shape.size <- geomorph.data.frame(shape = bY.shape, size = sp.infoOrdered$Csize)
dimnames(shape.size$shape)[[3]]
Allom <-procD.lm(shape~size, iter = 499, data = shape.size)

summary(Allom)

plotAllometry(Allom, method="RegScore" ); labels=dimnames(shape.size$shape)[[3]] 

#Allometry plot with sepcimen names
plot(Allom, method="RegScore" ,label=dimnames(shape.size$shape)[[3]])

plot(Allom, type = c("regression"), outliers = FALSE, predictor = NULL, reg.type = c("RegScore"))

plotAllometry(Allom, method = "RegScore")

------------------------------------------------------------------------
##Allometry with centroid size
```{r}
#correlate csize with sex, population and latitude without shape
       #check out procD.pgls in the geomorph help files
CS_Sex <- procD.pgls(shape~size, iter = 499, data = AllometryGDF) #example code from Ariel's work
summary(CS_Sex)

CS_Lat <- 
summary(CS_Lat)

CS_Pop <- 
summary (CS_Pop)
```
--------------------------------------------------------------------------


#THE SOLUTION - MAKE SURE YOU DO PLOTALLOMETRY WITH CSIZES AS USED IN THE ALLOMETRY MODEL!
par(mfrow=c(1,2))

plotAllometry(Allom_simple, size=AllometryGDF$size, method="RegScore", logsz = FALSE, pch=19, col= "pink")

plot(Allom_simple, type = "regression", reg.type = "RegScore", predictor = AllometryGDF$size, pch = 19)


plotAllometry(Allom_simple_log, size=AllometryGDF$size, method="RegScore", logsz = TRUE, pch=19, col= "pink")

plot(Allom_simple_log, type = "regression", reg.type = "RegScore", predictor = log(AllometryGDF$size), pch = 19)


#if logging, results are totally different
plotAllometry(Allom_simple, size=AllometryGDF$size, method="RegScore", logsz = TRUE, pch=19)

plot(Allom_simple, type = "regression", reg.type = "RegScore", predictor =log(AllometryGDF$size), pch = 19)

-------------------------------------------------------------------------
Two graphs at the same time:
par(mfrow=c(1,2))

-------------------------------------------------------------------------
Various Sex allometry Plot code:
plotAllometry(Allom_Sex, size=AllometryGDF$size, method="RegScore", logsz = FALSE, pch=19)

plot(Allom_Sex, type = "regression", reg.type = "RegScore", predictor =AllometryGDF$size, pch = 19)
plot(Allom_Sex, type = "regression", reg.type = "PredLine", predictor =AllometryGDF$size, pch = 19)

plotAllometry(Allom_Sex, size=AllometryGDF$size, method="RegScore", logsz = FALSE, pch=19, col=grp.col )

Doesn't work since no log

plot(log(meta.info$Csize), Allom_Sex$Reg.proj, xlab = "Centroid size", ylab= "Regression Score", cex=0.5, pch = 16, col= grp.col)

plot(meta.info$Csize, Allom_Sex$pred.val, xlab = "Centroid size", ylab= "Regression Score", cex=0.5, pch = 16, col= grp.col)

-------------------------------------------------------------------------
Ariel' PlotByGroup code for allometry

### PlotByGroup
```{r}
PlotByGroup <- function(metadata, column, color.key){
        # Matches colors or other plotting attributes to each specimen according to a grouping factor or a column number.
        #
        # Args:
        #   metadata: metadata table, often created with WriteMetadata().
        #   column: 1 string matching the column name with target groups.
        #   color.key: a vector of attributes listed in the same order as the unique group descriptors given by levels(as.factor(metadata$column))
        # 
        # Returns:
        #    A vector of colors the length of specimen number, with colors according to the group descriptor of each individual, ready for plot().
        
        if (is.numeric(column)) {
                col.num <- column
        } else {
                col.names <- unlist(dimnames(metadata)[[2]])
                col.num <- which(col.names == column)
        }
        
        grp <- as.factor(metadata[, col.num])
        names(color.key) <- sort(unique(grp))
        grp.col <- color.key[match(grp, names(color.key))]
        return(grp.col)
}
```


# Use 'PlotByGroup' function above to create an easy to plot function of sex
PCA_Pop <- PlotByGroup(meta.info, "Sex", grp.col_2)

# Use 'PlotByGroup' function above to create an easy to plot function of population
PCA_Pop <- PlotByGroup(meta.info, "Population", grp.col_2)

-------------------------------------------------------------------------
